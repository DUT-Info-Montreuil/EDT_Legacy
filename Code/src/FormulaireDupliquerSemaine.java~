package EDT;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

import javax.swing.JScrollPane;
import javax.swing.Timer;

import javax.swing.*;

/**
 * formulaire de duplication d'une semaine
 */
public class FormulaireDupliquerSemaine extends JDialog implements ActionListener {
	EDTApplication edtAppli;
	JCheckBox[] semaines;
	JButton b_selTout;
	JButton b_sel1sur2;
	JButton b_inverser;
	JToggleButton b_desactHorsDates;
	JButton b_valider;
	JButton b_annuler;
	boolean desactHorsDates;
	int indexDebutEnabled, indexFinEnabled; // index de la première et de la dernière semaines autorisées
	JProgressBar progBar;
	int avancement;
	Timer timer;
	String erreursDuplication;
	
	FormulaireDupliquerSemaine(EDTApplication _edtAppli) {
		super(_edtAppli, "Duplication de semaine", true);
		//procedure qui masque et ferme la fenetre
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				dispose(); // on ferme la fenêtre
			}
		});
		edtAppli=_edtAppli;
		JComboBox sem=edtAppli.getListeSemaines();
		// on ne va garder que les semaines de l'année scolaire en cours (en cas de retour en arrière il y a d'autres semaines)
        int nbSemaines=0;
        for (int i = 0; i < sem.getItemCount(); i++)
            if (Utilitaire.anneeScolaireEnCours((String)sem.getItemAt(i)))
                nbSemaines++;
		semaines=new JCheckBox[nbSemaines];
        int index=0;
        for (int i = 0; i < sem.getItemCount(); i++)
            if (Utilitaire.anneeScolaireEnCours((String)sem.getItemAt(i)))
                semaines[index++]=new JCheckBox((String)sem.getItemAt(i));
		// création des boutons
		b_selTout=new JButton("Sélectionner tout");
		b_sel1sur2=new JButton("Sélectionner un sur deux");
		b_inverser=new JButton("Inverser la sélection");
		b_desactHorsDates=new JToggleButton("Désactiver hors dates cochées");
		b_valider=new JButton("Valider");
		b_annuler=new JButton("Annuler");
		b_selTout.addActionListener(this);
		b_sel1sur2.addActionListener(this);
		b_inverser.addActionListener(this);
		b_desactHorsDates.addActionListener(this);
		b_valider.addActionListener(this);
		b_annuler.addActionListener(this);
		erreursDuplication="";
		// toutes les checkbox sont actives au départ
		desactHorsDates=false;
		indexDebutEnabled=0;
		indexFinEnabled=semaines.length-1;
		// barre de progression
		progBar=new JProgressBar();
		progBar.setStringPainted(true);
		progBar.setOrientation(JProgressBar.VERTICAL);
		avancement=0;
		timer = new Timer(200, new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				progBar.setValue(avancement);
				if (avancement >= progBar.getMaximum()) {
					timer.stop();
					progBar.setValue(progBar.getMaximum());
					if (!erreursDuplication.equals("")) {
						JScrollPane erreurs=new JScrollPane(new JTextArea(erreursDuplication));
						erreurs.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
						erreurs.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
				        erreurs.getVerticalScrollBar().setUnitIncrement(20);
						erreurs.setMaximumSize(new Dimension(800,800));
						JOptionPane.showMessageDialog(edtAppli, erreurs);
					}
					dispose();
				}
			}
		});
		afficher();
	}
	public void actionPerformed(ActionEvent e) {
		AbstractButton b = (AbstractButton)e.getSource();
		if (b.equals(b_selTout))
			for (int i = indexDebutEnabled; i <= indexFinEnabled; i++)
				semaines[i].setSelected(true);
		else if (b.equals(b_sel1sur2))
			for (int i = indexDebutEnabled; i <= indexFinEnabled; i+=2)
				semaines[i].setSelected(true);
		else if (b.equals(b_desactHorsDates)) {
			if (desactHorsDates) { // on déselectionne le bouton : on réactive toutes les checkbox
				for (int i = 0; i < semaines.length; i++)
					semaines[i].setEnabled(true);
				indexDebutEnabled=0;
				indexFinEnabled=semaines.length-1;
			}
			else { // on sélectionne le bouton : on désactive certaines semaines
				while (indexDebutEnabled<semaines.length && !semaines[indexDebutEnabled].isSelected())
					semaines[indexDebutEnabled++].setEnabled(false);
				while (indexFinEnabled>=0 && !semaines[indexFinEnabled].isSelected())
					semaines[indexFinEnabled--].setEnabled(false);
			}
			desactHorsDates=!desactHorsDates; // on inverse la position du bouton
//			validate(); // on valide l'affichage
		}
		else if (b.equals(b_inverser))
			for (int i = indexDebutEnabled; i <= indexFinEnabled; i++)
				semaines[i].setSelected(!semaines[i].isSelected());
		else if (b.equals(b_valider)) {
			dupliquerSemaine();
		}
		else if (b.equals(b_annuler)) {
			dispose();
		}
	}
	private void dupliquerSemaine() {
		// recherche de toutes les plages horaires du groupe sélectionné et de la semaine sélectionnée
		String semaineAdupliquer=(String)edtAppli.getListeSemaines().getSelectedItem();
		String promoAdupliquer=(String)edtAppli.getListePromotions().getSelectedItem();
		final Vector<PlageHoraire> plagesAdupliquer=edtAppli.getControleurDb().getPlagesHoraires(semaineAdupliquer, promoAdupliquer);
		// nombre de duplications à faire
		final ArrayList<String> lundiDestination=new ArrayList<String>(); // les dates destinations
		for (int i = indexDebutEnabled; i <= indexFinEnabled; i++)
			if (semaines[i].isSelected()) lundiDestination.add(semaines[i].getText());
		progBar.setMaximum(lundiDestination.size()*plagesAdupliquer.size()); // nombre de semaines sélectionnées * nb de plages dans la semaine à dupliquer
		// on duplique dans un thread à part
		Runnable doConstruct = new Runnable() {
			public void run() {
				for (Iterator<String> iterLundi = lundiDestination.iterator(); iterLundi.hasNext();) {
					String lundiDest=iterLundi.next();
					String lundiSource=(String)edtAppli.getListeSemaines().getSelectedItem();
					int nbJoursDecalage=Math.round((Utilitaire.calculerDate(lundiDest).getTimeInMillis()-Utilitaire.calculerDate(lundiSource).getTimeInMillis())/(float)86400000);
//System.out.println("src=" + lundiSource + " dest="+lundiDest + " décalage=" + nbJoursDecalage + "long="+(Utilitaire.calculerDate(lundiDest).getTimeInMillis()+"-"+Utilitaire.calculerDate(lundiSource).getTimeInMillis()));
					for (Iterator<PlageHoraire> iterPlage = plagesAdupliquer.iterator(); iterPlage.hasNext();) {
						PlageHoraire plage=iterPlage.next();
						dupliquerPlageHoraire(plage, nbJoursDecalage);
					}
				}
			}
		};
		Thread t = new Thread(doConstruct);
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		b_selTout.removeActionListener(this);
		b_sel1sur2.removeActionListener(this);;
		b_inverser.removeActionListener(this);;
		b_desactHorsDates.removeActionListener(this);;
		b_valider.removeActionListener(this);;
		b_annuler.removeActionListener(this);;
		t.start();
		timer.start();
	}
	
	/*
	 * duplique une plage horaire en la décalant de nbJoursDecalage jours
	 */
	private void dupliquerPlageHoraire(PlageHoraire plage, int nbJoursDecalage) {
//System.out.println(plage);
		int idPlage=edtAppli.getControleurDb().getIdPlageHoraire();
		SimpleTimeZone tz=new SimpleTimeZone(1*60*60*1000, "CET"); // GMT+1
		tz.setStartRule(Calendar.MARCH, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);
		tz.setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2 * 60 * 60 * 1000);
		GregorianCalendar debut=new GregorianCalendar(tz);
		debut.setTimeInMillis(plage.getDateDebut().getTimeInMillis());
		GregorianCalendar fin=new GregorianCalendar(tz);
		fin.setTimeInMillis(plage.getDateFin().getTimeInMillis());
		debut.add(Calendar.DAY_OF_YEAR, nbJoursDecalage);
		fin.add(Calendar.DAY_OF_YEAR, nbJoursDecalage);
		PlageHoraire nouvellePlage=new PlageHoraire(idPlage, debut, fin, plage.getMemo(), plage.getIdSalle(), plage.getIdGroupe(), plage.getIdMatiere(), plage.getIdProf(), plage.accesInternet(), plage.IsControle(), plage.getIdSalle2(), plage.getIdProf2(), plage.getIdProf3(), plage.getIdProf4(), plage.getIdProfQuiFaitAppel());
//System.out.println(nouvellePlage);
		if (edtAppli.getControleurDb().getPlageHoraire(nouvellePlage.getDateDebut(), "", 0)==null) { // ce n'est pas un jour férié
			String erreur=edtAppli.getControleurDb().ajouterPlageHoraire(nouvellePlage);
			if (!erreur.equals(""))
				erreursDuplication+=Utilitaire.afficherDate(nouvellePlage.getDateDebut(),nouvellePlage.getDateFin()) + " :\n" + erreur;
		}
		avancement++;
	}
		
	public void afficher() {
		dispose();
		JPanel panel=new JPanel();
		panel.setLayout(new BorderLayout());
		JPanel panelDates=new JPanel();
		panelDates.setLayout(new GridLayout(1+Math.max(1,(semaines.length-1)/4),4));
		for (int i = 0; i < semaines.length; i++)
			panelDates.add(semaines[i]);
		JScrollPane scroll=new JScrollPane(panelDates);
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scroll.getVerticalScrollBar().setUnitIncrement(20);
		panel.add(scroll, BorderLayout.CENTER);
		JPanel panelBoutons=new JPanel();
		panelBoutons.setLayout(new GridLayout(2,3));
		panelBoutons.add(b_selTout);
		panelBoutons.add(b_sel1sur2);
		panelBoutons.add(b_inverser);
		panelBoutons.add(b_desactHorsDates);
		panelBoutons.add(b_valider);
		panelBoutons.add(b_annuler);
		panel.add(panelBoutons, BorderLayout.SOUTH);
		panel.add(progBar, BorderLayout.EAST);
		// on ajoute tout dans la fenetre
		getContentPane().removeAll();
		getContentPane().add(panel);
		// positionner au centre de l'écran
		pack();
		setSize(Math.min(800, getWidth()), Math.min(800, getHeight()));
		setResizable(true);
		Rectangle rect=edtAppli.getBounds(); // getToolkit().getScreenSize();
		setLocation(Math.max(0,(int)(rect.x+(rect.width-getWidth())/2)), Math.max(0,(int)(rect.y+(rect.height-getHeight())/2)));
		setVisible(true);
	}
}

